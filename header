#include <iostream>
#include <sstream>
#include <string>
#include <vector>
#include <stack>
#include <cmath>
using namespace std;

string ans_order = "";
//************Convert String to Double**********//
double String2Double(string s)
{
	double num;
	istringstream s1(s);
	s1 >> num;
	if (s == "")
		num = 0;
	return num;
}

//**************Convert Double to String********//
string Double2String(double num)
{
	ostringstream s1;
	string s;
	s1 << num;
	s = s1.str();
	return s;
}

//***************Poly to Array double*********//
void Poly2Array(string standard, double cof_l[])
{
	string temp = "";
	double num = 0;
	int len = standard.size();
	int i = 0;
	int flag = 0;
	for (i = 0; i < len; i++)
	{
		//cout << i << " ";
		if (standard[i] != '.' && (standard[i]<'0' || standard[i]>'9'))
		{

			num = String2Double(temp);

			if (standard[i] == '+')
			{
				if (cof_l[0] == 0 && flag == 0)
					cof_l[0] = num;
				flag = 0;
				temp = "";
				//i++;
			}
			else if (standard[i] == '-')
			{
				if (cof_l[0] == 0 && flag == 0)
					cof_l[0] = num;
				flag = 0;
				temp = "-";
				//i++;
			}
			else if (standard[i] == 'x')
			{

				temp = "";
				//num = 0;
				string s = "";
				int index = 0;
				if (i == 0 || (i > 0) && (standard[i - 1] == '+' || standard[i - 1] == '-'))
					num = 1;
				if ((i + 1 < len&&standard[i + 1] != '^') || (i + 1 == len))
				{
					index = 1;
					flag = 1;
					//	i = i + 1;
				}
				else
				{
					i++;
					int j = 0;
					for (j = i + 1; j < len; j++)
					{
						if ((standard[j]<'0' || standard[j]>'9'))
							break;
						s = s + standard[j];
					}
					i = j;
					index = (int)String2Double(s);
				}
				cof_l[index] = num;
			}
		}
		else if (i < len)
		{
			//i++;
			temp = temp + standard[i];
		}
	}
	if (i == len&&temp != "")
	{
		cof_l[0] = String2Double(temp);
	}
}
//****************************************************************//
//***********Determine whether the String's content***************//
//******************is Number or not******************************//
//****************************************************************//

bool isNumber(string s)
{
	for (int i = 0; i < s.size(); i++)
	{
		if (s[i] != '.' &&s[i] != '-' && (s[i]<'0' || s[i]>'9'))
		{
			return false;
		}
	}
	return true;
}

//****************************************************************//
//********************Combining Polynomials***********************//
//****************************************************************//
string Combining(string left, string right)
{
	double *cof_l = new double[100];
	double *cof_r = new double[100];
	for (int i = 0; i < 100; i++)
	{
		cof_l[i] = 0;
		cof_r[i] = 0;
	}

	//***************left operater cof****************************//
	Poly2Array(left, cof_l);

	//*********************right operator cof***************//
	Poly2Array(right, cof_r);

	//*****************combine two polynomial****************//
	double *cof = new double[100];
	string ans = "";
	int flag_zero = 0;
	for (int i = 0; i < 100; i++)
	{
		cof[i] = cof_l[i] + cof_r[i];
		if (cof[i] != 0)
		{
			flag_zero = 1;
			if (i == 0)
			{
				if (ans != ""&&cof[i]>0)
					ans = ans + "+";
				ans = ans + Double2String(cof[i]);
			}
			else if (i == 1)
			{
				if (ans != ""&&cof[i]>0)
					ans = ans + "+";
				if (cof[i] == 1)
				{
					ans = ans + "x";
				}
				else
					ans = ans + Double2String(cof[i]) + "x";
			}
			else
			{

				if (ans != ""&&cof[i] > 0)
					ans = ans + "+";
				if (cof[i] == 1)
				{
					ans = ans + "x^" + Double2String(i);
				}
				else
					ans = ans + Double2String(cof[i]) + "x^" + Double2String(i);
			}
		}
	}
	if (flag_zero == 0)
		ans = ans + "0";
	return ans;

}

//****************************************************************//
//********************Multi Polynomials***********************//
//****************************************************************//
string Multiplies(string left, string right)
{
	string temp = "";
	double *cof_l = new double[100];
	double *cof_r = new double[100];
	for (int i = 0; i < 100; i++)
	{
		cof_l[i] = 0;
		cof_r[i] = 0;
	}
	double num = 0;
	//**********Conver Poly to Double Array******************//
	Poly2Array(left, cof_l);
	Poly2Array(right, cof_r);

	//****************Multi two Poly..*************//
	double *mult = new double[100];
	for (int i = 0; i < 100; i++)
		mult[i] = 0;
	for (int i = 0; i < 100; i++)
	{
		for (int j = 0; j < 100; j++)
		{
			if (i + j > 100)
				break;
			mult[i + j] += cof_l[j] * cof_r[i];
		}
	}
	string ans = "";
	int flag_zero = 0;
	for (int i = 0; i < 100; i++)
	{
		if (mult[i] != 0)
		{
			flag_zero = 1;
			if (i == 0)
			{
				if (ans != ""&&mult[i]>0)
					ans = ans + "+";
				ans = ans + Double2String(mult[i]);
			}
			else if (i == 1)
			{
				if (ans != ""&&mult[i]>0)
					ans = ans + "+";
				if (mult[i] == 1)
				{
					ans = ans + "x";
				}
				else
					ans = ans + Double2String(mult[i]) + "x";
			}
			else
			{

				if (ans != ""&&mult[i] > 0)
					ans = ans + "+";
				if (mult[i] == 1)
				{
					ans = ans + "x^" + Double2String(i);
				}
				else
					ans = ans + Double2String(mult[i]) + "x^" + Double2String(i);
			}
		}
	}
	if (flag_zero == 0)
		ans = ans + "0";
	return ans;
}

string Differential(string s)
{
	double *cof = new double[100];
	for (int i = 0; i < 100; i++)
		cof[i] = 0;

	Poly2Array(s, cof);

	for (int i = 1; i < 100; i++)
	{
		cof[i - 1] = cof[i] * i;
	}

	string ans = "";
	int flag_zero = 0;
	for (int i = 0; i < 100; i++)
	{
		if (cof[i] != 0)
		{
			flag_zero = 1;
			if (i == 0)
			{
				if (ans != ""&&cof[i]>0)
					ans = ans + "+";
				ans = ans + Double2String(cof[i]);
			}
			else if (i == 1)
			{
				if (ans != ""&&cof[i]>0)
					ans = ans + "+";
				if (cof[i] == 1)
				{
					ans = ans + "x";
				}
				else
					ans = ans + Double2String(cof[i]) + "x";
			}
			else
			{

				if (ans != ""&&cof[i] > 0)
					ans = ans + "+";
				if (cof[i] == 1)
				{
					ans = ans + "x^" + Double2String(i);
				}
				else
					ans = ans + Double2String(cof[i]) + "x^" + Double2String(i);
			}
		}
	}
	if (flag_zero == 0)
		ans = ans + "0";
	return ans;
}

string Integral(string s)
{
	double *cof = new double[100];
	for (int i = 0; i < 100; i++)
		cof[i] = 0;

	Poly2Array(s, cof);

	for (int i = 99; i >= 0; i--)
	{
		cof[i + 1] = 1.0*cof[i] / (i + 1);
	}
	cof[0] = 0;

	string ans = "";
	int flag_zero = 0;
	for (int i = 0; i < 100; i++)
	{
		if (cof[i] != 0)
		{
			flag_zero = 1;
			if (i == 0)
			{
				if (ans != ""&&cof[i]>0)
					ans = ans + "+";
				ans = ans + Double2String(cof[i]);
			}
			else if (i == 1)
			{
				if (ans != ""&&cof[i]>0)
					ans = ans + "+";
				if (cof[i] == 1)
				{
					ans = ans + "x";
				}
				else
					ans = ans + Double2String(cof[i]) + "x";
			}
			else
			{

				if (ans != ""&&cof[i] > 0)
					ans = ans + "+";
				if (cof[i] == 1)
				{
					ans = ans + "x^" + Double2String(i);
				}
				else
					ans = ans + Double2String(cof[i]) + "x^" + Double2String(i);
			}
		}
	}
	if (flag_zero == 0)
		ans = ans + "0";
	return ans + "+C";
}

double Result(double cof[], double x)
{
	double ans = 0;
	for (int i = 0; i < 100; i++)
	{
		ans += cof[i] * pow(x, i);
	}
	return ans;
}
//*********Solving Equation************//
double Solve(string s,double eps)
{
	double *cof = new double[100];
	double *cof_dif = new double[100];
	for (int i = 0; i < 100; i++)
	{
		cof[i] = 0;
		cof_dif[i] = 0;
	}
	Poly2Array(s, cof);
	string s_dif = Differential(s);
	Poly2Array(s_dif, cof_dif);
	double x_old = -100;
	double x_new = -100;
	//cout << Result(cof, x_new) << endl<<endl;
	while (abs(Result(cof, x_new)) > eps)
	{
		x_old=x_new;
		double res = Result(cof, x_new);
		double res_dif = Result(cof_dif, x_new);
		x_new = x_old - res / res_dif;
		}
	return x_new;

}
